import SwiftUI

struct CalendarView: View {
    let completionData: [Date: Bool]
    
    @State private var currentMonth = Date()
    private let calendar = Calendar.current
    private let daysOfWeek = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"]
    
    var body: some View {
        VStack(spacing: 20) {
            // Month selector
            HStack {
                Button(action: { changeMonth(by: -1) }) {
                    Image(systemName: "chevron.left")
                        .foregroundColor(.textPrimary)
                }
                
                Spacer()
                
                Text(monthYearString(from: currentMonth))
                    .font(.system(size: 16, weight: .bold))
                    .foregroundColor(.textPrimary)
                
                Spacer()
                
                Button(action: { changeMonth(by: 1) }) {
                    Image(systemName: "chevron.right")
                        .foregroundColor(.textPrimary)
                }
            }
            .padding(.horizontal)
            
            // Days of week header
            HStack(spacing: 0) {
                ForEach(daysOfWeek, id: \.self) { day in
                    Text(day)
                        .font(.system(size: 12, weight: .medium))
                        .foregroundColor(.textSecondary)
                        .frame(maxWidth: .infinity)
                }
            }
            .padding(.horizontal, 8)
            
            // Calendar grid - custom implementation with 30/31 days
            LazyVGrid(columns: Array(repeating: GridItem(.flexible(), spacing: 4), count: 7), spacing: 8) {
                let days = daysInMonth()
                
                // Add empty cells for padding at the start of the month
                ForEach(0..<firstWeekdayOfMonth()-1, id: \.self) { _ in
                    Rectangle()
                        .foregroundColor(.clear)
                        .aspectRatio(1, contentMode: .fit)
                }
                
                // Actual days of the month
                ForEach(days, id: \.self) { date in
                    let day = calendar.component(.day, from: date)
                    let isCompleted = completionData[calendar.startOfDay(for: date), default: false]
                    let isToday = calendar.isDateInToday(date)
                    
                    ZStack {
                        Circle()
                            .fill(backgroundFor(isCompleted: isCompleted, isToday: isToday))
                            .aspectRatio(1, contentMode: .fit)
                        
                        Text("\(day)")
                            .font(.system(size: 14, weight: isToday ? .bold : .regular))
                            .foregroundColor(textColorFor(isCompleted: isCompleted, isToday: isToday))
                    }
                    .aspectRatio(1, contentMode: .fit)
                }
            }
            .padding(.horizontal, 8)
        }
    }
    
    private func daysInMonth() -> [Date] {
        let range = calendar.range(of: .day, in: .month, for: currentMonth)!
        let numDays = range.count
        
        let firstDay = calendar.date(from: calendar.dateComponents([.year, .month], from: currentMonth))!
        
        return (0..<numDays).compactMap { day in
            calendar.date(byAdding: .day, value: day, to: firstDay)
        }
    }
    
    private func firstWeekdayOfMonth() -> Int {
        let firstDay = calendar.date(from: calendar.dateComponents([.year, .month], from: currentMonth))!
        return calendar.component(.weekday, from: firstDay)
    }
    
    private func backgroundFor(isCompleted: Bool, isToday: Bool) -> Color {
        if isCompleted {
            return Color.accent
        } else if isToday {
            return Color.accent.opacity(0.2)
        } else {
            return Color.clear
        }
    }
    
    private func textColorFor(isCompleted: Bool, isToday: Bool) -> Color {
        if isCompleted {
            return .white
        } else if isToday {
            return .textPrimary
        } else {
            return .textSecondary
        }
    }
    
    private func monthYearString(from date: Date) -> String {
        let formatter = DateFormatter()
        formatter.dateFormat = "MMMM yyyy"
        return formatter.string(from: date)
    }
    
    private func changeMonth(by value: Int) {
        if let newMonth = calendar.date(byAdding: .month, value: value, to: currentMonth) {
            currentMonth = newMonth
        }
    }
} 